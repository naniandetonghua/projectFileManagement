{"ast":null,"code":"/**\n * 日期格式化工具函数\n */\n\n/**\n * 格式化日期为 YYYY-MM-DD\n * @param {string|Date} date 日期\n * @returns {string} 格式化后的日期字符串\n */\nexport function formatDate(date) {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * 格式化日期时间为 YYYY-MM-DD HH:mm:ss\n * @param {string|Date} date 日期\n * @returns {string} 格式化后的日期时间字符串\n */\nexport function formatDateTime(date) {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n/**\n * 格式化相对时间\n * @param {string|Date} date 日期\n * @returns {string} 相对时间字符串\n */\nexport function formatRelativeTime(date) {\n  if (!date) return '';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  const now = new Date();\n  const diff = now.getTime() - d.getTime();\n  const diffMinutes = Math.floor(diff / (1000 * 60));\n  const diffHours = Math.floor(diff / (1000 * 60 * 60));\n  const diffDays = Math.floor(diff / (1000 * 60 * 60 * 24));\n  if (diffMinutes < 1) {\n    return '刚刚';\n  } else if (diffMinutes < 60) {\n    return `${diffMinutes}分钟前`;\n  } else if (diffHours < 24) {\n    return `${diffHours}小时前`;\n  } else if (diffDays < 30) {\n    return `${diffDays}天前`;\n  } else {\n    return formatDate(date);\n  }\n}\n\n/**\n * 获取文件大小格式化\n * @param {number} bytes 字节数\n * @returns {string} 格式化后的文件大小\n */\nexport function formatFileSize(bytes) {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}","map":{"version":3,"names":["formatDate","date","d","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","formatDateTime","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatRelativeTime","now","diff","diffMinutes","Math","floor","diffHours","diffDays","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed"],"sources":["/Users/shaoliang/Documents/corsor_workplace/项目交付物管理/src/utils/date.js"],"sourcesContent":["/**\n * 日期格式化工具函数\n */\n\n/**\n * 格式化日期为 YYYY-MM-DD\n * @param {string|Date} date 日期\n * @returns {string} 格式化后的日期字符串\n */\nexport function formatDate(date) {\n  if (!date) return ''\n  \n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n  \n  const year = d.getFullYear()\n  const month = String(d.getMonth() + 1).padStart(2, '0')\n  const day = String(d.getDate()).padStart(2, '0')\n  \n  return `${year}-${month}-${day}`\n}\n\n/**\n * 格式化日期时间为 YYYY-MM-DD HH:mm:ss\n * @param {string|Date} date 日期\n * @returns {string} 格式化后的日期时间字符串\n */\nexport function formatDateTime(date) {\n  if (!date) return ''\n  \n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n  \n  const year = d.getFullYear()\n  const month = String(d.getMonth() + 1).padStart(2, '0')\n  const day = String(d.getDate()).padStart(2, '0')\n  const hours = String(d.getHours()).padStart(2, '0')\n  const minutes = String(d.getMinutes()).padStart(2, '0')\n  const seconds = String(d.getSeconds()).padStart(2, '0')\n  \n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`\n}\n\n/**\n * 格式化相对时间\n * @param {string|Date} date 日期\n * @returns {string} 相对时间字符串\n */\nexport function formatRelativeTime(date) {\n  if (!date) return ''\n  \n  const d = new Date(date)\n  if (isNaN(d.getTime())) return ''\n  \n  const now = new Date()\n  const diff = now.getTime() - d.getTime()\n  const diffMinutes = Math.floor(diff / (1000 * 60))\n  const diffHours = Math.floor(diff / (1000 * 60 * 60))\n  const diffDays = Math.floor(diff / (1000 * 60 * 60 * 24))\n  \n  if (diffMinutes < 1) {\n    return '刚刚'\n  } else if (diffMinutes < 60) {\n    return `${diffMinutes}分钟前`\n  } else if (diffHours < 24) {\n    return `${diffHours}小时前`\n  } else if (diffDays < 30) {\n    return `${diffDays}天前`\n  } else {\n    return formatDate(date)\n  }\n}\n\n/**\n * 获取文件大小格式化\n * @param {number} bytes 字节数\n * @returns {string} 格式化后的文件大小\n */\nexport function formatFileSize(bytes) {\n  if (bytes === 0) return '0 B'\n  \n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}